/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package srs.appliance.api;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import srs.appliance.model.Appliance;
import srs.appliance.model.ApplianceType;
import srs.appliance.model.Rent;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@Api(value = "HomeAppliance", description = "the HomeAppliance API")
public interface HomeApplianceApi {

    @ApiOperation(value = "", nickname = "v1AppliancesGet", notes = "Returns a list of all appliances", response = Appliance.class, responseContainer = "List", tags={ "Home Appliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of home appliances", response = Appliance.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request. Please check the parameters"),
        @ApiResponse(code = 401, message = "Unauthorized. Please check your credentials"),
        @ApiResponse(code = 403, message = "Forbidden. Sorry, you can not access this resource.") })
    @RequestMapping(value = "/v1/appliances",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> v1AppliancesGet(@Min(0) @Max(10) @ApiParam(value = "Number of appliances returned", allowableValues = "") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,@ApiParam(value = "Model Name of the HA") @Valid @RequestParam(value = "model-name", required = false) String modelName,@ApiParam(value = "Type of the HA") @Valid @RequestParam(value = "type", required = false) Integer type,@ApiParam(value = "Status of the HA") @Valid @RequestParam(value = "state", required = false) String status);

    @ApiOperation(value = "", nickname = "v1AppliancesTypesGet", notes = "Returns a list of all appliance types", response = ApplianceType.class, responseContainer = "List", tags={ "Home Appliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of home appliances types", response = ApplianceType.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request. Please check the parameters"),
        @ApiResponse(code = 401, message = "Unauthorized. Please check your credentials"),
        @ApiResponse(code = 403, message = "Forbidden. Sorry, you can not access this resource.") })
    @RequestMapping(value = "/v1/appliances/types",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> v1AppliancesTypesGet();
    

    @ApiOperation(value = "", nickname = "v1AppliancesIdDelete", notes = "Updates a specific House appliance", tags={ "Home Appliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successfully deletion of the house appliances"),
        @ApiResponse(code = 401, message = "Unauthorized. Please check your credentials"),
        @ApiResponse(code = 403, message = "Forbidden. Sorry, you can not access this resource.") })
    @RequestMapping(value = "/v1/appliances/{appliance-id}",
        method = RequestMethod.DELETE)
    ResponseEntity<?> v1AppliancesIdDelete(@ApiParam(value = "id of the house appliance",required=true) @PathVariable("appliance-id") Integer applianceId);


    @ApiOperation(value = "", nickname = "v1AppliancesIdGet", notes = "Returns a specific house appliance", response = Appliance.class, tags={ "Home Appliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Specific house appliance information", response = Appliance.class),
        @ApiResponse(code = 400, message = "Bad Request. Please check the parameters"),
        @ApiResponse(code = 401, message = "Unauthorized. Please check your credentials"),
        @ApiResponse(code = 403, message = "Forbidden. Sorry, you can not access this resource.") })
    @RequestMapping(value = "/v1/appliances/{appliance-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> v1AppliancesIdGet(@ApiParam(value = "id of the house appliance",required=true) @PathVariable("appliance-id") Integer applianceId);


    @ApiOperation(value = "", nickname = "v1AppliancesIdPut", notes = "Updates a specific House appliance", tags={ "Home Appliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully updated the house appliance"),
        @ApiResponse(code = 401, message = "Unauthorized. Please check your credentials"),
        @ApiResponse(code = 403, message = "Forbidden. Sorry, you can not access this resource.") })
    @RequestMapping(value = "/v1/appliances/{appliance-id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<?> v1AppliancesIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Appliance body,@ApiParam(value = "id of the house appliance",required=true) @PathVariable("appliance-id") Integer applianceId);

    
    @ApiOperation(value = "", nickname = "v1AppliancesIdRentGet", notes = "Retrieves a specific rent", response = Rent.class, tags={ "Home Appliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A specific rent", response = Rent.class),
        @ApiResponse(code = 401, message = "Unauthorized. Please check your credentials"),
        @ApiResponse(code = 403, message = "Forbidden. Sorry, you can not access this resource.") })
    @RequestMapping(value = "/v1/appliances/{appliance-id}/rent",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> v1AppliancesIdRentGet(@ApiParam(value = "external id of appliance",required=true) @PathVariable("appliance-id") Integer applianceId, @ApiParam(value = "External Id of Rent") @Valid @RequestParam(value = "rent-id", required = false) Integer rentId, @ApiParam(value = "Student Id") @Valid @RequestParam(value = "student-id", required = false) Integer studentId);


    @ApiOperation(value = "", nickname = "v1AppliancesIdRentIdPut", notes = "Terminates a rent on an House appliance", tags={ "Home Appliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deletion of rent on the house appliance"),
        @ApiResponse(code = 401, message = "Unauthorized. Please check your credentials"),
        @ApiResponse(code = 403, message = "Forbidden. Sorry, you can not access this resource.") })
    @RequestMapping(value = "/v1/appliances/{appliance-id}/rent/{rent-id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<?> v1AppliancesIdRentIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Rent body,@ApiParam(value = "external id of the house appliance",required=true) @PathVariable("appliance-id") Integer applianceId,@ApiParam(value = "external id of the rent",required=true) @PathVariable("rent-id") Integer rentId );


    @ApiOperation(value = "", nickname = "v1AppliancesIdRentPost", notes = "Adds rent to a specific house appliance", tags={ "Home Appliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully addition of rent to the house appliance"),
        @ApiResponse(code = 401, message = "Unauthorized. Please check your credentials"),
        @ApiResponse(code = 403, message = "Forbidden. Sorry, you can not access this resource.") })
    @RequestMapping(value = "/v1/appliances/{appliance-id}/rent",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> v1AppliancesIdRentPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Rent body,@ApiParam(value = "id of the house appliance",required=true) @PathVariable("appliance-id") Integer applianceId);


    @ApiOperation(value = "", nickname = "v1AppliancesPost", notes = "Adds a new House appliance", tags={ "Home Appliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully created a new appliance"),
        @ApiResponse(code = 400, message = "Bad Request. Please check the parameters"),
        @ApiResponse(code = 401, message = "Unauthorized. Please check your credentials"),
        @ApiResponse(code = 403, message = "Forbidden. Sorry, you can not access this resource.") })
    @RequestMapping(value = "/v1/appliances",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> v1AppliancesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Appliance body);


    @ApiOperation(value = "", nickname = "v1AppliancesRentGet", notes = "Retrieves all rented HAs", response = Appliance.class, responseContainer = "List", tags={ "Home Appliance", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Rented HA's information", response = Appliance.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized. Please check your credentials"),
        @ApiResponse(code = 403, message = "Forbidden. Sorry, you can not access this resource.") })
    @RequestMapping(value = "/v1/appliances/rent",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> v1AppliancesRentGet(@ApiParam(value = "Id of the Student") @Valid @RequestParam(value = "student-id", required = false) Integer studentId, @ApiParam(value = "Status of the Rent") @Valid @RequestParam(value = "status", required = false) String status);

}
